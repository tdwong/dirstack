# dirstack for busybox
#
#	author:   td.wong@tp-link.com
#	created:  2017-10-31
#	revision:
#			2017-10-31	initial working version
#			2017-11-03	github version
#			2017-11-06	enhanced error handling
#			2017-11-13	enabled pushd and popd to print dirstack to stdout
#

zdirs() {
	# zdirs -c : clear directory stack
	[ $# -ne 0 -a "X$1" = "X-c" ] && DIRSTACK= && return
	[ $# -ne 0 -a "X$1" = "X-p" ] && echo DIRSTACK=$DIRSTACK && return
	[ $# -ne 0 -a "X$1" = "X-l" ] && HOMEDIR=${HOME} || HOMEDIR="~"
	# zdirs : show directory stack
		#-dbg- echo DIRSTACK=$DIRSTACK
	echo ' 0 ' $(pwd | sed -e "s|$HOME|$HOMEDIR|")
		# does $HOME substitution
	echo ${DIRSTACK} | awk -F':' '{for(ix=1;ix<=NF;ix++){if($ix!=""){gsub("'$HOME'","'$HOMEDIR'",$ix); printf" %d  %s\n",ix,$ix}}}'
}

zcd() {
	if [ $# -ne 0 ]; then
		if [ "$(echo $1 | cut -c1)" == "+" ]; then
		# zcd +N
				stackDepth=$(echo $DIRSTACK | awk -F':' '{print NF}')
				dstIndex=$(echo $1 | cut -c2-)
			# make sure destination is within dirstack
				###[ $(echo $1 | cut -c2-) -gt $(echo ${DIRSTACK} | awk -F':' '{print NF}') ] && return
			[ $dstIndex -eq 0 ] && return		# do nothing
			[ $dstIndex -gt $stackDepth ] && (>&2 echo "zcd: $1: directory stack index out of range") && return
			#
			DEST=$( echo ${DIRSTACK} | cut -d: -f$dstIndex )
			# sanity check
			[ ! -d $DEST ] && (>&2 echo "zpd: $DEST: No such directory") && return
			#
			if [ $dstIndex -eq 1 ]; then
				#
				# cd DIRSTACK[1]
				# DIRSTACK = DIRSTACK{2..end}		# DIRSTACK[1] removed
				#
				DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f2- )"
			else
				#
				# cd DIRSTACK[N]
				# DIRSTACK = DIRSTACK{1..N-1} .. DIRSTACK{N+1..end}		# DIRSTACK[N] removed
				#
				let nxt=dstIndex+1
				let prv=dstIndex-1
				if [ $nxt -le $stackDepth ]; then
					DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f1-${prv} ):$( echo ${DIRSTACK} | cut -d: -f${nxt}- )"
				else
					DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f1-${prv} )"
				fi
			fi
##
##				# awk script to extrat $dstIndex as DEST and return modified DIRSTACK
##			res=$( echo ${DIRSTACK} | awk -F':' ' {
##				for(ix=1;ix<=NF;ix++){
##					if(ix=='$dstIndex'){ dest=$ix }
##					else{
##						if (remain=="") { remain=$ix } else {remain=remain":"$ix} }}}
##				END { printf "DIRSTACK=%s;DEST=%s\n",remain,dest; }' )
##			eval $res
##
				#-dbg- echo DEST=$DEST
			\cd $DEST
			return
		fi
	fi
	\cd $*
}

zpd() {
	if [ $# -eq 0 ]; then
	# zpd
		[ -z $DIRSTACK ] && (>&2 echo "zpd: no other directory") && return
		#
		# cd DIRSTACK[1]
		# DIRSTACK = $(pwd) .. DIRSTACK{2..end}		# DIRSTACK[1] replaced
		#
		DEST=$( echo ${DIRSTACK} | cut -d: -f1 )
		# sanity check
		[ ! -d $DEST ] && (>&2 echo "zpd: $DEST: No such directory") && return
		#
		if [ $(echo $DIRSTACK | awk -F':' '{print NF}') -eq 1 ]; then
			DIRSTACK="$(pwd)"
		else
			DIRSTACK="$(pwd):$( echo ${DIRSTACK} | cut -d: -f2- )"
		fi
		\cd $DEST
		#
		echo $(pwd) $(echo $DIRSTACK | sed "s/:/ /")
	else
		if [ "$(echo $1 | cut -c1)" == "+" ]; then
		# zpd +N
				stackDepth=$(echo $DIRSTACK | awk -F':' '{print NF}')
				dstIndex=$(echo $1 | cut -c2-)
			# make sure destination is within dirstack
				###[ $(echo $1 | cut -c2-) -gt $(echo ${DIRSTACK} | awk -F':' '{print NF}') ] && return
			[ $dstIndex -eq 0 ] && return		# do nothing
			[ $dstIndex -gt $stackDepth ] && (>&2 echo "zpd: $1: directory stack index out of range") && return
			#
			DEST=$( echo ${DIRSTACK} | cut -d: -f$dstIndex )
			# sanity check
			[ ! -d $DEST ] && (>&2 echo "zpd: $DEST: No such directory") && return
			#
			if [ $dstIndex -eq 1 ]; then
				#
				# cd DIRSTACK[1]
				# DIRSTACK = DIRSTACK{2..end} .. $(pwd)
				#
				DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f2- ):$(pwd)"
			else
				#
				# cd DIRSTACK[N]
				# DIRSTACK = DIRSTACK{N+1..end} .. $(pwd) .. DIRSTACK{1..N-1}
				#
				let nxt=dstIndex+1
				let prv=dstIndex-1
				if [ $nxt -le $stackDepth ]; then
					DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f${nxt}- ):$(pwd):$( echo ${DIRSTACK} | cut -d: -f1-${prv} )"
				else
					DIRSTACK="$(pwd):$( echo ${DIRSTACK} | cut -d: -f1-${prv} )"
				fi
			fi
			\cd $DEST
			#
			echo $(pwd) $(echo $DIRSTACK | sed "s/:/ /")
		else
		# zpd {dest-dir}
			# sanity check
			[ ! -d $1 ] && (>&2 echo "zpd: $1: No such directory") && return
			#
			# cd $1
			# DIRSTACK = $(pwd) .. DIRSTACK		# DIRSTACK[1] added
			#
			[ -z $DIRSTACK ] && DIRSTACK="$(pwd)" || DIRSTACK="$(pwd):${DIRSTACK}"
			\cd $1
			#
			echo $(pwd) $(echo $DIRSTACK | sed "s/:/ /")
		fi
	fi
}

zpo() {
	if [ $# -eq 0 ]; then
	# zpo
		[ -z $DIRSTACK ] && (>&2 echo "zpo: directory stack empty") && return
		#
		# cd DIRSTACK[1]
		# DIRSTACK = DIRSTACK{2..end}		# DIRSTACK[1] removed
		#
		DEST=$( echo ${DIRSTACK} | cut -d: -f1 )
		# sanity check
		[ ! -d $DEST ] && (>&2 echo "zpd: $DEST: No such directory") && return
		#
		DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f2- )"
			#-dbg- echo DIRSTACK=$DIRSTACK
		\cd $DEST
		#
		echo $(pwd) $(echo $DIRSTACK | sed "s/:/ /")
	else
		if [ "$(echo $1 | cut -c1)" == "+" ]; then
		# zpo +N
				stackDepth=$(echo $DIRSTACK | awk -F':' '{print NF}')
				dstIndex=$(echo $1 | cut -c2-)
			# make sure destination is within dirstack
				###[ $(echo $1 | cut -c2-) -gt $(echo ${DIRSTACK} | awk -F':' '{print NF}') ] && return
			[ $dstIndex -eq 0 ] && zpo && return
			[ $dstIndex -gt $stackDepth ] && (>&2 echo "zpo: $1: directory stack index out of range") && return
			#
			if [ $dstIndex -eq 1 ]; then
				#
				# DIRSTACK = DIRSTACK{2..end}		# DIRSTACK[1] removed
				#
				DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f2- )"
			else
				#
				# DIRSTACK = DIRSTACK{1..N-1} .. DIRSTACK{N+1..end}		# DIRSTACK[N] removed
				#
				let nxt=dstIndex+1
				let prv=dstIndex-1
				if [ $nxt -le $stackDepth ]; then
					DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f1-${prv} ):$( echo ${DIRSTACK} | cut -d: -f${nxt}- )"
				else
					DIRSTACK="$( echo ${DIRSTACK} | cut -d: -f1-${prv} )"
				fi
			fi	# [ $dstIndex -eq 1 ];
		fi
	fi	# [ $# -eq 0 ];
}

#
alias dirs=zdirs
alias pd='zpd 2>&1 >/dev/null'
alias po='zpo 2>&1 >/dev/null'
alias cd=zcd
#
alias pushd=zpd
alias popd=zpo

